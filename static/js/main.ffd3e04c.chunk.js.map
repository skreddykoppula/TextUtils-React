{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","Fragment","className","concat","mode","href","title","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","style","color","heading","value","onChange","event","console","log","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","filter","element","length","Alert","alert","role","msg","defaultProps","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.ffd3e04c.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\nexport default function Navbar(props) {\r\n\r\n  return (\r\n    <>\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <a className=\"navbar-brand\"  href=\"#\">{props.title}</a>\r\n  {/* <Link className=\"navbar-brand\"  to=\"/\">{props.title}</Link> */}\r\n  <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n    <span className=\"navbar-toggler-icon\"></span>\r\n  </button>\r\n\r\n  <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n    <ul className=\"navbar-nav mr-auto\">\r\n      <li className=\"nav-item active\">\r\n        <a className=\"nav-link\" href=\"#\">Home <span className=\"sr-only\">(current)</span></a>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n        <a className=\"nav-link\" href=\"#\">About</a>\r\n      </li>\r\n    </ul>\r\n    {/* <form className=\"form-inline my-2 my-lg-0\">\r\n      <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n      <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\r\n    </form> */}\r\n    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"mode\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.mode==='light'?\"Convert to Dark Mode\":\"Convert to Light Mode\"}</label>\r\n</div>\r\n  </div>\r\n</nav>\r\n    </>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title : PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps= {\r\n        title : \"My APP\"\r\n}\r\n\r\n\r\n","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const [text,setText] = useState(\"\");\r\n    // setText(\"Hello\")\r\n    const handleUpClick = () =>\r\n    {\r\n        console.log(\"Upper Case\");\r\n        let newText=text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Upper case converted\",\"success\")\r\n    }\r\n    const handleLoClick = () =>\r\n    {\r\n        console.log(\"Lower Case\");\r\n        let newText=text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Lower case converted\",\"success\")\r\n    }\r\n    const handleClearClick = () =>\r\n    {\r\n        console.log(\"clear\");\r\n        setText(\"\");\r\n        props.showAlert(\"clear\",\"success\")\r\n    }\r\n\r\n\r\n    const handleOnChange = (event) =>\r\n    {\r\n        console.log(\"on change\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const handleCopyClick = () => {\r\n        console.log(\"copy\");\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"copied\",\"success\")\r\n      };\r\n  return (\r\n    <>\r\n        <div className=\"container\" style={{color:props.mode==='light'?'black':'white'}}>\r\n        <div className=\"form-group\">\r\n            <h1 >{props.heading}</h1>\r\n            <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor:props.mode==='light'?'grey':'white',color:props.mode==='light'?'white':'black'}} id=\"myBox\" rows=\"8\"></textarea>\r\n        </div>\r\n        <button className='btn btn-primary mx-1 my-1' onClick={handleUpClick}>Convert To UpperCase</button>\r\n        <button className='btn btn-primary mx-1 my-1' onClick={handleLoClick}>Convert To LowerCase</button>\r\n        <button className='btn btn-primary mx-1 my-1' onClick={handleClearClick}>Clear</button>\r\n        <button className='btn btn-primary mx-1 my-1' onClick={handleCopyClick}>Copy</button>\r\n        </div>\r\n\r\n        <div className='container my-3' style={{color:props.mode==='light'?'black':'white'}}>\r\n            <h1>Your Text Summary</h1>\r\n            <p>{text.split(\" \").filter((element) => {return element.length!==0}).length} words and {text.length} characters</p>\r\n            <p>{0.008*text.split(\" \").length} Minutes to read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"enter something to preview\"}</p>\r\n        </div>\r\n    </>\r\n  )\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Alert(props) {\r\n  return (\r\n    props.alert && <div>\r\n      <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{props.alert.type}</strong> : {props.alert.msg}\r\n        \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","// import logo from './logo.svg';\nimport { useState } from 'react';\nimport React from 'react';\nimport './App.css';\nimport Navbar from './Components/Navbar';\n// import About from './Components/About';\nimport TextForm from './Components/TextForm';\nimport Alert from './Components/Alert';\n// import { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\n\n\n\n\nfunction App() {\n  const [mode, setMode]=useState('light')//weather dark mode enabled or not\n\n\n  const toggleMode = () =>{\n    if(mode==='light'){\n      setMode('dark');\n      document.body.style.backgroundColor='grey'\n      showAlert(\"Dark Mode Enabled\",\"success\")\n      document.title=\"Text Util Dark Mode\"\n\n      //we use this to change title frequently for ads\n      // setInterval(()=>{\n      //   document.title=\"Hello\"\n      // },2000)\n      // setInterval(()=>{\n      //   document.title=\"World\"\n      // },1500)\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor='white'\n      showAlert(\"White Mode Enabled\",\"danger\")\n      document.title=\"Text Util Light Mode\"\n    }\n  }\n\n    const [alert, setAlert]= useState(null);\n    const showAlert = (message,type) => {\n        setAlert({\n          msg: message,\n          type: type\n        })\n\n        setTimeout(()=>{\n            setAlert(null);\n        },2000)\n    }\n  return (\n    <>\n <Navbar title=\"New App\" mode={mode} toggleMode={toggleMode}/>\n    <Alert alert={alert}/>\n    <div className='container my-3'>\n    {/* <BrowserRouter>\n          <Routes> */}\n            {/* <Route exact path=\"about\" element={<About />} />\n            <Route exact path=\"/\" element= */}\n            {<TextForm heading=\"Enter Your Text to Analysis\" showAlert={showAlert} mode={mode}/>}\n            {/* > */}\n            \n              \n             \n            {/* </Route> */}\n          {/* </Routes>\n        </BrowserRouter> */}\n\n      \n    </div>\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}